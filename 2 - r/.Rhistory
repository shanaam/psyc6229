# creating matrices
x <- 1:12
m <- matrix( x, ncol=4 )  # make a 3 x 4 matrix of numbers 1 to 12 (filled in column-wise)
# non-numeric matrices
m <- matrix( c('abc','def','ghi','jkl'), nrow=2 )  # character matrix
m <- matrix( c(TRUE,FALSE,TRUE,FALSE), nrow=2 )    # logical matrix
typeof( m )                                        # find the mode of a matrix
# getting parts of matrices
m <- matrix( rnorm(50), nrow=10 )
m[2,1]                   # get an element of m
m[2,2:4]                 # get several elements of m
m[2,]                    # get a row of m
m[,2]                    # get a column of m
m[ m>0 ]                 # get a vector of the elements of m that are greater than zero
# getting parts of matrices
m <- matrix( rnorm(50), nrow=10 )
m>0
# non-numeric matrices
m <- matrix( c('abc','def','ghi','jkl'), nrow=2 )  # character matrix
# applying functions to matrices
sum( m )                 # find the sum of all the elements in a matrix
sin( m )                 # find the sine of all the elements in a matrix
dim( m )                 # find the dimension of a matrix
# useful fact:  a matrix is just an atomic vector with a "dim" property that specifies
# the number of rows and columns
x <- seq( 1, 12, by=1 )
# creating lists
x <- list( a=1, initials='rfm', scores=c(10,20,30) )  # make a list
str( x )  # show contents of x
# getting elements of lists
x$a
x$initials
x$scores
x$scores[2]
# subscripts to get elements of a list
x[[1]]
x[[3]][2]
# subscripts to get a sublist
x[1]
x[1:2]
x[[1:2]]
x[1:2]
# setting elements of lists
x$a <- 2
x$initials <- 'jfk'
# applying functions to lists
is.list( x )             # see whether x is a list
length( x )              # get the number of elements in x
names( x )               # get a vector of the names of the elements of x
# note:  lists are vectors, but not atomic vectors!
x <- list( a=1, b=2 )
is.vector( x )
is.atomic( x )
# creating data frames
df <- data.frame( trial=1:5,
signal=c('a','b','b','a','b'),
response=c('a','b','a','a','a'),
rt=c(0.11,0.21,0.12,0.21,0.21) )  # make a data frame
# getting parts of data frames
df$trial
df$signal
df$response[1:3]
# applying functions to data frames
is.list( df )            # see whether x is a list
is.data.frame( df )      # see whether x is a data frame
length( df )             # get number of columns in x
names( df )              # get a vector of the names of the columns of df
help.start()                   # open help homepage
getwd()                        # get working directory
ls()                           # list all variables
rm( x )                        # remove variable x
rm( list=ls() )                # remove all variables
x <- 1
y <- 2
save( x, y, file='datafile.Rdata' )  # save variables
load( 'datafile.Rdata' )             # load variables
unlink( 'datafile.Rdata' )           # delete a file
# create a function to calculate sine in degrees
sind <- function(theta)
sin((pi/180) * theta)
sind(0)
sind(90)
# create a function to calculate sine in degrees (default) or radians
sinv <- function(theta, deg = TRUE) {
if (deg)
return(sin((pi/180) * theta))
else
return(sin(theta))
}
sinv(90)
sinv(pi/2, deg = FALSE)
sinv(deg = FALSE, theta = pi/2)
# create a function to calculate sine and cosine
sincos <- function(theta)
list(sine = sin(theta), cosine = cos(theta))
v <- sincos(0)
v$sine
v$cosine
str(v)
# create a function that uses a variable in the workspace
r <- rnorm(100)
sumsquare <- function(x)
sum((r - x)^2)
sumsquare(0)
sumsquare(1)
# change the value of r and call sumsquare again
r <- rnorm(100)
sumsquare(0)
sumsquare(1)
# make some data
x <- seq( 0, 2*pi, 0.1 )
y <- sin( x )
# make some data
x <- seq( 0, 2*pi, by=0.1 )
y <- sin( x )
y <- y + rnorm( length(y), sd=0.1 )
# basic plot
plot( x, y )
# plot with some options
plot( x, y, type='o', pch=2, lwd=2, col='red', xlab='x', ylab='sin(x)', main='a sinusoid',
xlim=c(-0.1,2*pi+0.1), ylim=c(-1.2,1.2) )
# add to an existing plot
z <- sin(x)
lines( x, z, col='blue' )               # add lines connecting points
abline( h=0 )                           # add a straight line
curve( sin(2*x), c(0,2*pi), col='green', add=TRUE )  # plot a function
# histogram
r <- rnorm( 1000, mean=10, sd=3 )
hist(r)
# histogram with probability units on y-axis
r <- rnorm( 1000, mean=10, sd=3 )
hist(r, probability=TRUE, ylim=c(0,0.15))
curve( dnorm(x,mean=10,sd=3), c(-3,3), col='red', add=TRUE )
# print the squares of a few numbers
for ( k in c( 2, 3, 5, 9, 14, 25, 30, 40 ) )
print( k^2 )
